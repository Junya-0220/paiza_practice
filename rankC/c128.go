package rankC

import (
	"fmt"
)

/*
分数の分母にさらに分数が含まれており、それが連なったものを連分数といいます。
その中でも N 個の変数を含む、以下のような形の連分数の値を計算してみましょう。


入力例 1 のように N = 3 で x_1 = 2, x_2 = 3, x_3 = 4 のときは以下のように計算できます。
ただし、最後に与えられる変数は 1 / x_N の形で現れることに注意してください。


入力例 2 では N = 4 ですが、同じように 1 / x_N の形になることに注意してください。


ただし、連分数の計算過程で現れる分数はすべて既約分数となります。
評価ポイント
10回のテストケースで、正答率、実行速度、メモリ消費量をはかり得点が決まります。
より早い解答時間で提出したほうが得点が高くなります。
複数のテストケースで正しい出力がされるか評価（+50点）
解答までの速さ評価（+50点）
入力される値
入力は以下のフォーマットで与えられます。

N
x_1
x_2
...
x_N
・1 行目には、変数の数を表す整数 N が与えられます。
・続く N 行目のうち i 行目 (1 ≦ i ≦ N) には、i 番目の変数を表す整数 x_i が与えられます。
・入力は合計で N + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。

それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください
期待する出力
連分数の計算して得られる既約分数の分子と分母を以下の形式で出力してください。
x y
期待する出力は 1 行からなります。それぞれ分子、分母を表す x, y をこの順でスペース区切りで出力してください。
末尾に改行を入れ、余計な文字、空行を含んではいけません。
条件
すべてのテストケースにおいて、以下の条件をみたします。

・2 ≦ N ≦ 9
・2 ≦ x_i ≦ 10 (1 ≦ i ≦ N)
入力例1
3
2
3
4
出力例1
30 13
入力例2
4
2
2
2
2
出力例2
29 12
入力例3
8
10
5
8
7
8
9
7
7
出力例3
11223788 1100889
*/

// 最大公約数を求める関数
func gcd(a, b int) int {
	if b == 0 {
		return a
	}
	return gcd(b, a%b)
}

func RankC128() {
	var n int
	fmt.Scan(&n)

	// 変数の値を格納するスライス
	x := make([]int, n)

	// 変数の値を読み込む
	for i := 0; i < n; i++ {
		fmt.Scan(&x[i])
	}

	// 初期値の設定
	p, q := x[n-1], 1

	// 連分数の計算
	for i := n - 2; i >= 0; i-- {
		p, q = x[i]*p+q, p
	}

	// 既約分数にする
	d := gcd(p, q)
	p /= d
	q /= d

	fmt.Printf("%d %d\n", p, q)
}
